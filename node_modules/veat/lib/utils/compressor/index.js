class Compressors {
    type = 'null';
    constructor() { }
    async toDataURL(file, quality = 0.75) {
        const canvas = await this.exc(file);
        return new Promise((resolve) => {
            canvas.toBlob(blob => {
                if (blob && blob.size > file.size) {
                    const reader = new FileReader();
                    reader.onload = () => resolve(reader.result);
                    reader.readAsDataURL(file);
                }
                else {
                    resolve(canvas.toDataURL(this.type, quality));
                }
            }, this.type, quality);
        });
    }
    async toBlob(file, quality = 0.75) {
        const canvas = await this.exc(file);
        return new Promise((resolve) => {
            canvas.toBlob(blob => {
                if (!blob) {
                    resolve(new Blob());
                }
                else if (blob.size > file.size) {
                    resolve(new Blob([file], { type: this.type }));
                }
                else {
                    resolve(blob);
                }
            }, this.type, quality);
        });
    }
    /**
     * 压缩图片
     * @param file 文件 或 是base64格式的url
     * @returns 压缩后的图片
     */
    exc(file) {
        this.type = file.type;
        return this.draw(URL.createObjectURL(new Blob([file])), file.name);
    }
    draw(result, filename = '') {
        return new Promise((resolve, reject) => {
            const img = new Image();
            img.src = result;
            img.alt = filename;
            img.onload = _ => {
                const canvas = document.createElement('canvas'), context = canvas.getContext('2d'), w = img.width * 0.8, h = img.height * 0.8;
                if (context) {
                    canvas.width = w;
                    canvas.height = h;
                    context.clearRect(0, 0, w, h);
                    context.drawImage(img, 0, 0, w, h);
                    resolve(canvas);
                    URL.revokeObjectURL(result);
                }
                else {
                    reject(new Error('Canvas context acquisition failed...')); // Canvas 上下文获取失败
                }
            };
            img.onabort = err => reject(err);
            img.onerror = err => reject(err);
        });
    }
    ;
}
export default new Compressors();
