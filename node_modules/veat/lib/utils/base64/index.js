/**
 * 通用的支持中文的 base64
 * @see {@link https://developer.mozilla.org/zh-CN/docs/Glossary/Base64 更多不同实现方法参考}
 */
class Base64 {
    // 因 unescape 与 escape 被废弃, 故不推荐使用
    // encode(data: string | number | boolean): string {
    //   return window.btoa(unescape(encodeURIComponent(data)));
    // }
    // decode(data: string): string {
    //   return decodeURIComponent(escape(window.atob(data)));
    // }
    // 非常快，相对可移植，非常紧凑, 但与 fetch api 兼容性不够好, 因为转换成utf-16了
    // encode(data: string) {
    //   const uint16Array = new Uint16Array(data.length);
    //   Array.prototype.forEach.call(uint16Array, function (_el, idx, arr) {
    //     arr[idx] = data.charCodeAt(idx);
    //   });
    //   const uint8Array = Array.from(new Uint8Array(uint16Array.buffer));
    //   return window.btoa(String.fromCharCode.apply(null, uint8Array));
    // }
    // decode(data: string) {
    //   const codes = window.atob(data),
    //     uint8Array = new Uint8Array(codes.length);
    //   Array.prototype.forEach.call(uint8Array, function (_el, idx, arr) {
    //     arr[idx] = codes.charCodeAt(idx);
    //   });
    //   const uint16Array = Array.from(new Uint16Array(uint8Array.buffer));
    //   return String.fromCharCode.apply(null, uint16Array);
    // }
    // 可移植, 不是标准的
    // encode(data: string | number | boolean): string {
    //   return window.btoa(
    //     encodeURIComponent(data)
    //       .replace(/%([0-9A-F]{2})/g, (_match, p1: any) => {
    //         return String.fromCharCode(Number('0x' + p1));
    //       })
    //   );
    // }
    // decode(data: string): string {
    //   return decodeURIComponent(
    //     window.atob(data)
    //       .split('')
    //       .map((c) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))
    //       .join('')
    //   );
    // }
    textEncoder;
    textDecoder;
    constructor() {
        this.textEncoder = new TextEncoder();
        this.textDecoder = new TextDecoder();
    }
    /**
     * 将目标字符串转换成base64
     * @param data 目标字符串
     * @returns 转换后的base64字符串
     */
    encode(data) {
        const uint8Array = this.textEncoder.encode(data);
        return window.btoa(String.fromCharCode.apply(null, Array.from(uint8Array)));
    }
    /**
     * 将base64字符串还原成普通字符串
     * @param data 目标base64字符串
     * @returns 平台字符串
     */
    decode(data) {
        const uint8Array = Uint8Array.from(window.atob(data).split('').map(c => c.charCodeAt(0)));
        return this.textDecoder.decode(uint8Array);
    }
    // /**
    //  * 将目标字符串转换成 DataURL
    //  * @param data 目标字符串
    //  * @returns 转换后的 DataURL
    //  * @deprecated 需要使用到异步, 不友好(不推荐)
    //  */
    // dataToUrlAsync(data: string): Promise<string> {
    //   const blob = new Blob([data], { type: 'null' }),
    //     fr = new FileReader();
    //   fr.readAsDataURL(blob);
    //   return new Promise((resolve) => {
    //     fr.onload = () => {
    //       fr.abort();
    //       if (typeof fr.result === 'string') {
    //         resolve(fr.result);
    //       }
    //       resolve('');
    //     }
    //   });
    // }
    /**
     * 将目标字符串转换成 DataURL
     * @param data 目标字符串
     * @param mimeType 媒体类型, {@link https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types 请参考}
     * @returns 转换后的 DataURL
     */
    createDataURL(data, mimeType = 'null') {
        mimeType.length === 0 && (mimeType = 'null');
        return `data:${mimeType};base64,${this.encode(data)}`;
    }
}
export default new Base64();
