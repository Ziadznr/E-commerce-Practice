/**
 * 常用时间日期工具集
 */
class Dates {
    now;
    lunarDay;
    lunarMonth;
    weekfield;
    constructor() {
        this.now = new Date();
        this.lunarDay = '一二三四五六七八九十';
        this.lunarMonth = '正二三四五六七八九十冬腊';
        this.weekfield = '日一二三四五六';
    }
    /**
     * 格式化目标时间(公历)
     * @param date 目标日期时间
     * @param formatType 格式化方式
     * @param separator 日期分隔符
     * @returns 格式化的日期时间
     */
    solarCal(date, formatType, separator) {
        return this.init(date, 'solarExec')(formatType, separator);
    }
    lunarCal(date) {
        return this.init(date, 'lunarExec')();
    }
    init(date, fnname) {
        if (typeof date === 'number') {
            this.now = new Date(date);
        }
        else if (!(date instanceof Date)) {
            return () => String();
        }
        else {
            this.now = date;
        }
        return this[fnname].bind(this);
    }
    /**
     * 格式化目标时间(农历)
     * @returns 格式化的日期
     */
    lunarExec() {
        const d_str = this.now.toLocaleString('ja-JP-u-ca-chinese'), d_d = d_str.split(' ')[0], d_strs = d_d.match(/\d+/g), month = Number(d_strs?.shift()), num_day = Number(d_strs?.shift());
        let str_day;
        if (num_day > 20) {
            str_day = `廿${this.lunarDay.charAt(num_day - 21)}`;
        }
        else if (num_day === 20) {
            str_day = '二十';
        }
        else if (num_day > 10) {
            str_day = `十${this.lunarDay.charAt(num_day - 11)}`;
        }
        else {
            str_day = `初${this.lunarDay.charAt(num_day - 1)}`;
        }
        return `${this.lunarMonth.charAt(month - 1)}月${str_day}`;
    }
    /**
     * 格式化目标时间(公历)
     * @param formatType 格式化方式
     * @param separator 日期分隔符
     * @returns 格式化的日期时间
     */
    solarExec(formatType = 'yyyy-mm-dd hh:mi:ss.ms', separator) {
        let format = formatType;
        if (separator) {
            format = formatType.replace(/-/g, separator);
        }
        return this.solarHandler(format, this.createFormat());
    }
    ifLeapYear(date) {
        this.init(date, 'ifLeapYearExec')();
    }
    /**
     * 判断目标日期是否为闰年
     *
     * 说明:
     *
     * 1. 十年一闰百年不闰: 即如果year能够被4整除, 但是不能被100整除, 则year是闰年
     *
     * 2. 每四百年再一闰: 如果year能够被400整除, 则year是闰年
     *
     * @returns 是否为闰年
     */
    ifLeapYearExec() {
        const year = this.now.getFullYear();
        return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);
    }
    /**
     * 格式化时间
     * @param format 要格式化的类型
     * @returns 格式化后的时间字符串
     */
    solarHandler(format, formatData) {
        return format.replace(/yyyy|yy|mm|dd|wk|hh|mi|ss|ms/g, match => {
            return formatData[match];
        });
    }
    /**
     * 生成格式化器
     */
    createFormat() {
        return {
            yyyy: this.timeFormat(this.now.getFullYear(), -4),
            yy: this.timeFormat(this.now.getFullYear()),
            mm: this.timeFormat(this.now.getMonth() + 1),
            dd: this.timeFormat(this.now.getDate()),
            wk: this.getWK(this.timeFormat(this.now.getDay(), -1)),
            hh: this.timeFormat(this.now.getHours()),
            mi: this.timeFormat(this.now.getMinutes()),
            ss: this.timeFormat(this.now.getSeconds()),
            ms: this.timeFormat(this.now.getMilliseconds(), -3),
        };
    }
    getWK(par) {
        return `星期${this.weekfield.charAt(parseInt(par))}`;
    }
    /**
     * 数字转换成特定格式的字符串
     * @param data 数字
     * @param index 截取的位置
     * @returns 格式化后的数字字符串
     */
    timeFormat(data, index = -2) {
        return '00'.concat(String(data)).slice(index);
    }
}
export default new Dates();
