import TemplateError from './adapter/error';
import caches from './adapter/caches';
import Compiler from './compiler';
import defaults from './defaults';
import loader from './adapter/loader';
/**
 * 编译模版
 * @param id_or_url   存放模板内容的 url 或 DOM id
 * @param options  编译选项
 */
const compile = async (id_or_url, data, options = {}) => {
    // 合并默认配置
    options = defaults.$extend(options);
    options.path = id_or_url;
    return Promise.resolve(caches.get(id_or_url) // 缓存匹配
    ).then((render) => {
        if (render) {
            return render(data);
        }
        return loaderHandler(id_or_url, data, options);
    }).catch(e => {
        if (!options.recompile) {
            options.recompile = true;
            // 报错是, 移除缓存, 重新加载
            caches.delete(id_or_url);
            return compile(id_or_url, data, options);
        }
        throw new TemplateError(e);
    });
};
async function loaderHandler(id_or_url, data, options) {
    return loader(id_or_url, options).then(source => {
        options.source = source;
        const compiler = new Compiler(options), render = compiler.build(id_or_url);
        // 设置缓存
        caches.set(id_or_url, render);
        return render(data);
    });
}
compile.Compiler = Compiler;
export default compile;
