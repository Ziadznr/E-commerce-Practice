import '../../styles/iform.css';
function validator(formid, rules) {
    const formEl = document.querySelector(formid), ret = {};
    Object.keys(rules).forEach(key => {
        const rule = rules[key], curel = formEl?.querySelector(`[name=${key}]`);
        curel && (ret[key] = handler(curel, rule));
    });
    return Object.values(ret).map(item => {
        item.node.parentElement.nextElementSibling.textContent = item.message || '';
        return item;
    }).filter(item => item.message);
}
function handler(curel, currule) {
    const val = curel.value.trim(), errmsg = {
        node: curel,
        value: val
    };
    let _err;
    for (const item of currule) {
        errmsg.rule = item;
        if (item.require && !val) {
            _err = errmsgHandler(item.message, val, item);
            break;
        }
        if (item.pattern) {
            _err = errmsgHandler(item.message, val, item);
            break;
        }
        if (item.validator && !item.validator(val, item)) {
            _err = errmsgHandler(item.message, val, item);
            break;
        }
    }
    _err && (errmsg.message = _err);
    return errmsg;
}
function errmsgHandler(errObj, curval, rule) {
    switch (typeof errObj) {
        case 'function':
            return errObj(curval, rule);
        default:
            return errObj;
    }
}
function patchMessage(formid) {
    document.querySelectorAll(`${formid} input, ${formid} select`).forEach(item => {
        item.addEventListener('change', function (_) {
            _.preventDefault();
            this.parentElement.nextElementSibling.textContent = '';
        });
    });
}
export default {
    validator,
    patchMessage
};
