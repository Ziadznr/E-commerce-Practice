import '../../styles/index.css';
import '../../styles/button.css';
import '../../styles/dialog.css';
import '../../lib/icons/shared/loading-ring.css';
import dialog from '../moddata/dialog/index.js';
import loading from '../moddata/loading/index.js';
import ZIndexs from '../utils/zindex';
import Art from '../iart';
const def_data = {
    loading_style: 'style="width:20px;height:20px;"',
    inter: 'veat-fade-enter-active',
    outter: 'veat-fade-leave-active',
    center: 'veat-dialog-message-center',
    left: 'veat-dialog-message-left',
    right: 'veat-dialog-message-right'
}, dialog_def_opt = {
    message: '提示文案',
    showCancelButton: false,
    cancelButtonText: '取消',
    showConfirmButton: true,
    confirmButtonText: '确认'
};
let idname = '', btn_disabled = false;
function alert(options) {
    return init(options, false);
}
function confirm(options) {
    return init(options, true);
}
async function init(options, showCancelButton) {
    if (typeof options === 'string') {
        return show(Object.assign({}, dialog_def_opt, { message: options }, { showCancelButton }, { msgClassAlign: def_data.center }));
    }
    else {
        return show(Object.assign({}, dialog_def_opt, options, { showCancelButton }, { msgClassAlign: def_data[options.msgAlign || 'center'] }));
    }
}
async function show(options) {
    idname = `veat-dialog-${Math.random().toString().slice(-4)}`;
    return Art.render(dialog, {
        ...options, idname,
        classname: def_data.inter, innercss: `style="z-index:${ZIndexs.getIndex()};"`
    }).then(html => renderDialogHandler(html, options));
}
function renderDialogHandler(html, opt) {
    document.body.insertAdjacentHTML('beforeend', html);
    return bindEvent(opt.beforeClose);
}
function bindEvent(beforeCloseCallBack) {
    const cancelBtn = document.querySelector(`#${idname} #cancel`), confirmBtn = document.querySelector(`#${idname} #confirm`);
    return new Promise((resolve) => {
        cancelBtn?.addEventListener('click', _ => {
            _.preventDefault();
            !btn_disabled && clickHanler('cancel', beforeCloseCallBack).then(action => {
                action && resolve(action);
            });
        }, false);
        confirmBtn?.addEventListener('click', _ => {
            _.preventDefault();
            !btn_disabled && clickHanler('confirm', beforeCloseCallBack).then(action => {
                action && resolve(action);
            });
        }, false);
    });
}
function clickHanler(action, beforeCloseCallBack) {
    return new Promise(async (resolve) => {
        if (beforeCloseCallBack) {
            const btnEl = document.querySelector(`.veat-button-${action}-content`), btn_ctx = btnEl.innerHTML;
            const loading_html = await Art.render(loading, { loading_style: def_data.loading_style });
            btnEl.innerHTML = loading_html;
            btn_disabled = true;
            beforeCloseCallBack(action)
                .then(res => {
                btnEl.innerHTML = btn_ctx;
                btn_disabled = false;
                if (res) {
                    clear();
                    resolve(action);
                }
            });
        }
        else {
            clear();
            resolve(action);
        }
    });
}
function clear() {
    const dialogEl = document.getElementById(idname);
    setTimeout(() => {
        dialogEl.classList.replace(def_data.inter, def_data.outter);
        dialogEl.remove();
    }, 300);
}
const Dialog = {
    alert, confirm
};
export default Dialog;
