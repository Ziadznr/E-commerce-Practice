import '../../styles/index.css';
import '../../styles/toast.css';
import '../../lib/icons/shared/loading-ios.css';
import '../../lib/icons/outlined/done2.css';
import '../../lib/icons/outlined/error2.css';
import ZIndexs from '../utils/zindex';
import toast_text from '../moddata/toast/text.js';
import toast_html from '../moddata/toast/html.js';
import toast_loading from '../moddata/toast/loading.js';
import toast_success from '../moddata/toast/success.js';
import toast_fail from '../moddata/toast/fail.js';
import Art from '../iart';
const tpls = {
    text: toast_text,
    html: toast_html,
    loading: toast_loading,
    success: toast_success,
    fail: toast_fail
}, classNames = {
    top: 'veat-toast-top',
    middle: 'veat-toast-middle',
    bottom: 'veat-toast-bottom',
    inter: 'veat-fade-enter-active',
    outter: 'veat-fade-leave-active'
};
const def_duration = 2000;
let idname = '';
function show(options) {
    const { type, position } = options;
    idname = `veat-toast-${Math.random().toString().slice(-4)}`;
    options.idname = idname;
    options.classname = classNames[position] + ' ' + classNames.inter;
    readToastTpl(tpls[type], options);
}
function readToastTpl(toast_tpl, options) {
    Art.render(toast_tpl, {
        ...options, innercss: `style="z-index:${ZIndexs.getIndex()};"`
    }).then(html => renderToastHandler(html, options))
        .then(clearFn);
}
function renderToastHandler(html, opts) {
    document.body.insertAdjacentHTML('beforeend', html);
    return opts;
}
export default function Toast(message, duration) {
    resolveOption('text', message, duration);
}
function initToast(type, message = '', duration = def_duration) {
    show({
        type, message, position: 'middle', duration
    });
}
function Text(message, duration) {
    resolveOption('text', message, duration);
}
function Html(message, duration) {
    resolveOption('html', message, duration);
}
function resolveOption(type, message, duration) {
    if (typeof message === 'string') {
        initToast(type, message, duration);
    }
    else {
        show(message);
    }
}
function Loading(message) {
    initToast('loading', message, -1);
}
function Success(message, duration) {
    initToast('success', message, duration);
}
function Fail(message, duration) {
    initToast('fail', message, duration);
}
function clearFn(options) {
    const { duration, idname = '' } = options;
    duration > 0 && clearHandler(idname, duration);
}
function clearHandler(idname, duration) {
    const toastEl = document.getElementById(idname);
    toastEl && setTimeout(() => {
        toastEl.remove();
    }, duration, setTimeout(() => {
        toastEl.classList.replace(classNames.inter, classNames.outter);
    }, duration - 300));
}
function Clear() {
    clearHandler(idname, 300);
}
Toast.text = Text;
Toast.html = Html;
Toast.loading = Loading;
Toast.success = Success;
Toast.fail = Fail;
Toast.clear = Clear;
