import '../../styles/index.css';
import '../../styles/notify.css';
import notify_txt from '../moddata/notify/index.js';
import ZIndexs from '../utils/zindex';
import Art from '../iart';
const def_duration = 2000, classNames = {
    top: 'veat-popup-top',
    bottom: 'veat-popup-bottom',
    primary: 'veat-notify-primary',
    success: 'veat-notify-success',
    danger: 'veat-notify-danger',
    warning: 'veat-notify-warning',
    enter: 'veat-popup-slide-enter',
    leave: 'veat-popup-slide-leave',
    top_enter: 'veat-popup-slide-top-enter',
    top_leave: 'veat-popup-slide-top-leave',
    bottom_enter: 'veat-popup-slide-bottom-enter',
    bottom_leave: 'veat-popup-slide-bottom-leave'
};
let _enter = 'top_enter', _leave = 'top_leave';
function Notify(message) {
    const notifyEls = document.querySelectorAll('[id^=veat-notify-],[id*=veat-notify-]');
    notifyEls.forEach(notifyEl => {
        notifyEl.remove();
    });
    return initNotify(message);
}
function initNotify(message) {
    const options = typeof message === 'string' ? { message } : message;
    return showNotify(options);
}
async function showNotify(options) {
    const idname = `veat-notify-${Math.random().toString().slice(-4)}`, { type = 'danger', message = '通知内容', duration = def_duration, position = 'top', color, background, unclick = false } = options || arguments[0];
    _enter = `${position}_enter`;
    _leave = `${position}_leave`;
    const classnames = `${classNames[position]} ${classNames[type]} ${classNames.enter} ${classNames[_enter]}`, innercss = `style="z-index:${ZIndexs.getIndex()};${color ? `color:${color};` : ''}${background ? `background:${background};` : ''}"`;
    const html = await Art.render(notify_txt, {
        idname, classnames, innercss, message
    });
    document.body.insertAdjacentHTML('beforeend', html);
    const notifyEl = document.getElementById(idname);
    if (!notifyEl) {
        return false;
    }
    if (!unclick) {
        notifyEl.removeAttribute('class');
    }
    const el = notifyEl.firstElementChild;
    return new Promise((resolve) => {
        setTimeout(() => {
            el?.classList.remove(classNames.enter, classNames[_enter]);
        }, 200);
        if (duration > 0) {
            setTimeout(() => {
                el?.classList.add(classNames.leave, classNames[_leave]);
            }, duration - 200);
            setTimeout(() => {
                notifyEl.remove();
                resolve(true);
            }, duration);
        }
        else {
            resolve(true);
        }
    });
}
function clear() {
    const notifyEls = document.querySelectorAll('[id^=veat-notify-],[id*=veat-notify-]');
    notifyEls.forEach(notifyEl => {
        notifyEl.firstElementChild?.classList.add(classNames.leave, classNames[_leave]);
        setTimeout(() => {
            notifyEl.remove();
        }, 200);
    });
}
Notify.clear = clear;
export default Notify;
