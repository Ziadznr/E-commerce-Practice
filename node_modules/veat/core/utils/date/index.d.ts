/// <reference types="veat/veat" />
/**
 * 常用时间日期工具集
 */
declare class Dates {
    private now;
    private lunarDay;
    private lunarMonth;
    private weekfield;
    constructor();
    /**
     * 格式化目标时间(公历)
     * @param date 目标日期时间
     * @param formatType 格式化方式
     * @param separator 日期分隔符
     * @returns 格式化的日期时间
     */
    solarCal(date: Date | number, formatType: DateFormatType, separator?: string): any;
    lunarCal(date: Date | number): any;
    private init;
    /**
     * 格式化目标时间(农历)
     * @returns 格式化的日期
     */
    private lunarExec;
    /**
     * 格式化目标时间(公历)
     * @param formatType 格式化方式
     * @param separator 日期分隔符
     * @returns 格式化的日期时间
     */
    private solarExec;
    ifLeapYear(date: Date | number): void;
    /**
     * 判断目标日期是否为闰年
     *
     * 说明:
     *
     * 1. 十年一闰百年不闰: 即如果year能够被4整除, 但是不能被100整除, 则year是闰年
     *
     * 2. 每四百年再一闰: 如果year能够被400整除, 则year是闰年
     *
     * @returns 是否为闰年
     */
    private ifLeapYearExec;
    /**
     * 格式化时间
     * @param format 要格式化的类型
     * @returns 格式化后的时间字符串
     */
    private solarHandler;
    /**
     * 生成格式化器
     */
    private createFormat;
    private getWK;
    /**
     * 数字转换成特定格式的字符串
     * @param data 数字
     * @param index 截取的位置
     * @returns 格式化后的数字字符串
     */
    private timeFormat;
}
declare const _default: Dates;
export default _default;
